// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/internal/app/workers (interfaces: UserService)

// Package mock_workers is a generated GoMock package.
package mock_workers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// IncreaseBalanceAndUpdateOrderStatus mocks base method.
func (m *MockUserService) IncreaseBalanceAndUpdateOrderStatus(arg0 context.Context, arg1 string, arg2 float32, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseBalanceAndUpdateOrderStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseBalanceAndUpdateOrderStatus indicates an expected call of IncreaseBalanceAndUpdateOrderStatus.
func (mr *MockUserServiceMockRecorder) IncreaseBalanceAndUpdateOrderStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseBalanceAndUpdateOrderStatus", reflect.TypeOf((*MockUserService)(nil).IncreaseBalanceAndUpdateOrderStatus), arg0, arg1, arg2, arg3)
}

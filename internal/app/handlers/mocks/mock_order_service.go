// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/internal/app/handlers (interfaces: OrderService)

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	domain "gophermart/internal/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// GetOrCreateOrder mocks base method.
func (m *MockOrderService) GetOrCreateOrder(arg0 context.Context, arg1 domain.OrderDTO) (*domain.OrderDTO, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*domain.OrderDTO)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateOrder indicates an expected call of GetOrCreateOrder.
func (mr *MockOrderServiceMockRecorder) GetOrCreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateOrder", reflect.TypeOf((*MockOrderService)(nil).GetOrCreateOrder), arg0, arg1)
}

// GetOrdersByUser mocks base method.
func (m *MockOrderService) GetOrdersByUser(arg0 context.Context, arg1 *domain.UserDTO) ([]*domain.OrderDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUser", arg0, arg1)
	ret0, _ := ret[0].([]*domain.OrderDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUser indicates an expected call of GetOrdersByUser.
func (mr *MockOrderServiceMockRecorder) GetOrdersByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUser", reflect.TypeOf((*MockOrderService)(nil).GetOrdersByUser), arg0, arg1)
}

// UpdateOrdersStatusesByNumber mocks base method.
func (m *MockOrderService) UpdateOrdersStatusesByNumber(arg0 context.Context, arg1 []domain.OrderDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrdersStatusesByNumber", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrdersStatusesByNumber indicates an expected call of UpdateOrdersStatusesByNumber.
func (mr *MockOrderServiceMockRecorder) UpdateOrdersStatusesByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrdersStatusesByNumber", reflect.TypeOf((*MockOrderService)(nil).UpdateOrdersStatusesByNumber), arg0, arg1)
}

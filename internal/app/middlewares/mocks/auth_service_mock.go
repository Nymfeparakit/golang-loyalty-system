// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/internal/app/middlewares (interfaces: AuthService)

// Package mock_middlewares is a generated GoMock package.
package mock_middlewares

import (
	context "context"
	domain "gophermart/internal/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// AddUserToContext mocks base method.
func (m *MockAuthService) AddUserToContext(arg0 context.Context, arg1 *domain.UserDTO) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToContext", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// AddUserToContext indicates an expected call of AddUserToContext.
func (mr *MockAuthServiceMockRecorder) AddUserToContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToContext", reflect.TypeOf((*MockAuthService)(nil).AddUserToContext), arg0, arg1)
}

// ParseUserToken mocks base method.
func (m *MockAuthService) ParseUserToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUserToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUserToken indicates an expected call of ParseUserToken.
func (mr *MockAuthServiceMockRecorder) ParseUserToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUserToken", reflect.TypeOf((*MockAuthService)(nil).ParseUserToken), arg0)
}
